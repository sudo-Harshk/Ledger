rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Gets the role of the user making the request.
    // Checks for existence before accessing data to prevent errors.
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Checks if the user document exists and has a role
    function hasUserDocument() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Checks if the user is a Teacher.
    function isTeacher() {
      return isSignedIn() && hasUserDocument() && getRole() == 'teacher';
    }
    
    // Checks if the user is an Admin.
    function isAdmin() {
      return isSignedIn() && hasUserDocument() && getRole() == 'admin';
    }

    // Checks if the user is a Student.
    function isStudent() {
      return isSignedIn() && hasUserDocument() && getRole() == 'student';
    }

    // Checks if the user is a Teacher or Admin (for operations that require elevated privileges)
    function isTeacherOrAdmin() {
      return isSignedIn() && hasUserDocument() && (getRole() == 'teacher' || getRole() == 'admin');
    }

    // Validates user updates to prevent students from modifying protected fields
    function isValidUserUpdate() {
      let protectedFields = ['role','monthlyFee','totalDueByMonth','lastTotalDueUpdate'].toSet();
      let changed = request.resource.data.diff(resource.data).affectedKeys();
      return !changed.hasAny(protectedFields);
    }

    // --- Collection Rules ---

    // Rules for the 'users' collection
    match /users/{userId} {
      // READ: A user can read their own profile. Teachers and Admins can read all profiles.
      // Also allow reading if user is signed in (for role checking and initial setup)
      allow read: if isSignedIn() && (request.auth.uid == userId || isTeacherOrAdmin());
      
      // LIST (Queries): Allow teachers/admins to query all users, and allow username queries for login
      allow list: if isTeacherOrAdmin() || true;

      // CREATE: Only Teachers and Admins can create new user documents.
      // Also allow creation if user is signed in (for initial user document creation)
      allow create: if isSignedIn() && (isTeacherOrAdmin() || request.auth.uid == userId);

      // UPDATE: Students can only modify non-protected fields;
      // Teachers and admins can modify everything.
      allow update: if isSignedIn() && (
        // Student self‚Äêedit, restricted:
        request.auth.uid == userId && isValidUserUpdate()
        ||
        // Teachers and admins unrestricted:
        isTeacherOrAdmin()
      );

      // DELETE: Only Teachers and Admins can delete user documents.
      allow delete: if isTeacherOrAdmin();

      // Rules for the 'monthlySummaries' subcollection
      match /monthlySummaries/{monthId} {
        // READ: Only the user (owner) or a teacher can read
        allow read: if isSignedIn() && (request.auth.uid == userId || isTeacherOrAdmin());
        // WRITE: Only teachers can write
        allow write: if isTeacherOrAdmin();
      }
    }

    // Rules for the 'attendance' collection
    match /attendance/{attendanceId} {
      // READ: A student can read their own records. Teachers and Admins can read all.
      // Also allow reading if user is signed in (for general queries)
      allow read: if isSignedIn() && (request.auth.uid == resource.data.studentId || isTeacherOrAdmin() || isStudent());

      // LIST (Queries): Allow authenticated users to query attendance
      allow list: if isSignedIn();

      // CREATE: A student can create their own attendance, but status must be 'pending'.
      // Teachers and Admins can create any attendance record.
      allow create: if (isSignedIn() && ((request.auth.uid == request.resource.data.studentId && request.resource.data.status == 'pending')
                     || isTeacherOrAdmin()));

      // UPDATE: Only Teachers and Admins can update attendance (e.g., approve/reject).
      allow update: if isSignedIn() && isTeacherOrAdmin();
      
      // DELETE: Only Teachers and Admins can delete attendance.
      allow delete: if isSignedIn() && isTeacherOrAdmin();
    }
    
    // Rules for the 'revenueSummaries' collection
    match /revenueSummaries/{summaryId} {
        // READ: Any signed-in user can read the summary data.
        allow read: if isSignedIn();
        
        // LIST (Queries): Allow authenticated users to query revenue summaries
        allow list: if isSignedIn();
        
        // WRITE: Only Teachers and Admins can update the summary document.
        allow write: if isSignedIn() && isTeacherOrAdmin();
    }
  }
}